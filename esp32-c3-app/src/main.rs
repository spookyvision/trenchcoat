use core::str;
use std::{
    sync::{Arc, Condvar, Mutex},
    thread::sleep,
    time::Duration,
};

mod bsc;
use anyhow::{anyhow, bail};
use embedded_svc::{
    httpd::{registry::Registry, Response},
    wifi::{
        self, AuthMethod, ClientConfiguration, ClientConnectionStatus, ClientIpStatus,
        ClientStatus, Wifi as _,
    },
};
use esp_idf_svc::{
    httpd, netif::EspNetifStack, nvs::EspDefaultNvs, sysloop::EspSysLoopStack, wifi::EspWifi,
};
use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys::{self, c_types, esp, EspError};
use log::info;
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

// ivmarkov: "binstart gives you a regular Rust STD fn main()"
fn main() -> anyhow::Result<()> {
    esp_idf_sys::link_patches();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    let _wifi = bsc::wifi::wifi(app_config.wifi_ssid, app_config.wifi_psk)?;

    let mutex = Arc::new((Mutex::new(None), Condvar::new()));
    let _httpd = httpd(mutex.clone())?;

    // loop {
    //     println!("main…");
    //     sleep(Duration::from_millis(1000));
    // }

    let _wait = mutex.0.lock().unwrap();
    Ok(())
}

#[allow(unused)]
struct Wifi {
    esp_wifi: EspWifi,
    netif_stack: Arc<EspNetifStack>,
    sys_loop_stack: Arc<EspSysLoopStack>,
    default_nvs: Arc<EspDefaultNvs>,
}

fn httpd(mutex: Arc<(Mutex<Option<u32>>, Condvar)>) -> anyhow::Result<httpd::Server> {
    let server = httpd::ServerRegistry::new()
        .at("/")
        .get(|_| Ok("Hello from Rust!".into()))?
        .at("/foo")
        .get(|_| bail!("Boo, something happened!"))?
        .at("/bar")
        .get(|_| {
            Response::new(403)
                .status_message("No permissions")
                .body("You have no permissions to access this page".into())
                .into()
        })?
        .at("/panic")
        .get(|_| panic!("User requested a panic!"))?;

    #[cfg(esp32s2)]
    let server = httpd_ulp_endpoints(server, mutex)?;

    server.start(&Default::default())
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from mcu!")
}

fn temperature(val: f32) -> String {
    templated(format!("chip temperature: {:.2}°C", val))
}
