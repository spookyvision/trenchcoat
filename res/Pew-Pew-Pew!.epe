{
  "name": "Pew-Pew-Pew!",
  "id": "hRKrNtdnFHfEpLAyp",
  "sources": {
    "main": "// Pew-Pew-Pew! v2.0.0 (Pattern for PixelBlaze)\n// by Scott Balay -- https://github.com/zenblender\n\nisForwardDirection = true // flip to run backwards\nlaserCount = 10  // use a multiple of numPaletteRGBs to have each available color represented equally\nfadeFactor = 0.8\nspeedFactor = 0.01\n\n// when on, new lasers cause entire strip to flash blue\n// when off, blue component of each laser affects its color as normal\nuseBlueLightning = true\n\n// init RGBs that in the palette of available colors:\nnumPaletteRGBs = 5\npaletteRGBs = array(numPaletteRGBs)\npaletteRGBs[0] = packRGB(255,13,107)\npaletteRGBs[1] = packRGB(232,12,208)\npaletteRGBs[2] = packRGB(200,0,255)\npaletteRGBs[3] = packRGB(124,12,232)\npaletteRGBs[4] = packRGB(70,13,255)\n\nambientR = 15\nambientG = 0\nambientB = 0\n\nfunction getRandomVelocity() { return random(4) + 3 }\n\n// init RGB of each laser:\nlaserRGBs = createArray(laserCount, function(i){ return paletteRGBs[i % numPaletteRGBs] }, true)\n\n// init randomized starting positions of each laser:\nlaserPositions = createArray(laserCount, function(){ return random(pixelCount) }, true)\n\n// init each laser's velocity\nlaserVelocities = createArray(laserCount, function(){ return getRandomVelocity() }, true)\n\n// init the full pixel array:\npixelRGBs = createArray(pixelCount)\n\nexport function beforeRender(delta) {\n  // fade existing pixels:\n  for (pixelIndex = 0; pixelIndex < pixelCount; pixelIndex++) {\n    pixelRGBs[pixelIndex] = packRGB(\n      floor(getR(pixelRGBs[pixelIndex]) * fadeFactor),\n      floor(getG(pixelRGBs[pixelIndex]) * fadeFactor),\n      floor(getB(pixelRGBs[pixelIndex]) * fadeFactor)\n    )\n  }\n\n  // advance laser positions:\n  for (laserIndex = 0; laserIndex < laserCount; laserIndex++) {\n    currentLaserPosition = laserPositions[laserIndex]\n    nextLaserPosition = currentLaserPosition + (delta * speedFactor * laserVelocities[laserIndex])\n    for (pixelIndex = floor(nextLaserPosition); pixelIndex >= currentLaserPosition; pixelIndex--) {\n      // draw new laser edge, but fill in \"gaps\" from last draw:\n      if (pixelIndex < pixelCount) {\n        pixelRGBs[pixelIndex] = packRGB(\n            min(255, getR(pixelRGBs[pixelIndex]) + getR(laserRGBs[laserIndex])),\n            min(255, getG(pixelRGBs[pixelIndex]) + getG(laserRGBs[laserIndex])),\n            min(255, getB(pixelRGBs[pixelIndex]) + getB(laserRGBs[laserIndex]))\n        )\n      }\n    }\n\n    laserPositions[laserIndex] = nextLaserPosition\n    if (laserPositions[laserIndex] >= pixelCount) {\n      // wrap this laser back to the start\n      laserPositions[laserIndex] = 0\n      laserVelocities[laserIndex] = getRandomVelocity()\n    }\n  }\n}\n\nexport function render(rawIndex) {\n  index = isForwardDirection ? rawIndex : (pixelCount - rawIndex - 1)\n  rgb(\n    clamp((getR(pixelRGBs[index]) + ambientR) / 255, 0, 1),\n    clamp((getG(pixelRGBs[index]) + ambientG) / 255, 0, 1),\n    clamp((getB(pixelRGBs[useBlueLightning ? 0 : index]) + ambientB) / 255, 0, 1)\n  )\n}\n\n//===== UTILS =====\n// ARRAY INIT FUNCTIONS:\nfunction createArray(size, valueOrFn, isFn) {\n  arr = array(size)\n  if (!valueOrFn) return arr\n  for (i = 0; i < size; i++) {\n    arr[i] = isFn ? valueOrFn(i) : valueOrFn\n  }\n  return arr\n}\n// RGB FUNCTIONS:\n// assume each component is an 8-bit \"int\" (0-255)\nfunction packRGB(r, g, b) { return _packColor(r, g, b) }\nfunction getR(value) { return _getFirstComponent(value) }\nfunction getG(value) { return _getSecondComponent(value) }\nfunction getB(value) { return _getThirdComponent(value) }\n// HSV FUNCTIONS:\n// assume each component is an 8-bit \"int\" (0-255)\nfunction packHSV(h, s, v) { return _packColor(h, s, v) }\nfunction getH(value) { return _getFirstComponent(value) }\nfunction getS(value) { return _getSecondComponent(value) }\nfunction getV(value) { return _getThirdComponent(value) }\n// \"PRIVATE\" COLOR FUNCTIONS:\n// assume each component is an 8-bit \"int\" (0-255)\nfunction _packColor(a, b, c) { return (a<<8) + b + (c>>8) }\nfunction _getFirstComponent(value) { return (value>>8) & 0xff } // R or H\nfunction _getSecondComponent(value) { return value & 0xff } // G or S\nfunction _getThirdComponent(value) { return (value<<8) & 0xff } // B or V\n"
  },
  "preview": ""
}